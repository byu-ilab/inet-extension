//
// Generated file, do not edit! Created by opp_msgc 4.0 from ./EmulationJackMsg.msg.
//

#ifndef _EMULATIONJACKMSG_M_H_
#define _EMULATIONJACKMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0400
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{ ... }} section:

#include "EmulationJackCallback.h"
// end cplusplus



/**
 * Class generated from <tt>./EmulationJackMsg.msg</tt> by opp_msgc.
 * <pre>
 * message EmulationJackMsg {
 *     EmulationJackCallback callback;
 * }
 * </pre>
 */
class EmulationJackMsg : public cMessage
{
  protected:
    EmulationJackCallback callback_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EmulationJackMsg&);

  public:
    EmulationJackMsg(const char *name=NULL, int kind=0);
    EmulationJackMsg(const EmulationJackMsg& other);
    virtual ~EmulationJackMsg();
    EmulationJackMsg& operator=(const EmulationJackMsg& other);
    virtual EmulationJackMsg *dup() const {return new EmulationJackMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual EmulationJackCallback& getCallback();
    virtual const EmulationJackCallback& getCallback() const {return const_cast<EmulationJackMsg*>(this)->getCallback();}
    virtual void setCallback(const EmulationJackCallback& callback_var);
};

inline void doPacking(cCommBuffer *b, EmulationJackMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EmulationJackMsg& obj) {obj.parsimUnpack(b);}


#endif // _EMULATIONJACKMSG_M_H_
