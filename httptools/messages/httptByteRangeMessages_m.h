//
// Generated file, do not edit! Created by opp_msgc 4.0 from httptools/messages/httptByteRangeMessages.msg.
//

#ifndef _HTTPTBYTERANGEMESSAGES_M_H_
#define _HTTPTBYTERANGEMESSAGES_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0400
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{ ... }} section:

#include "httptMessages_m.h"
// end cplusplus



/**
 * Class generated from <tt>httptools/messages/httptByteRangeMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet httptByteRangeRequestMessage extends httptRequestMessage
 * {
 *     @omitGetVerb(true);			
 *     int firstBytePos = 0;
 *     
 *     int lastBytePos = -1;
 *     	
 * }
 * </pre>
 */
class httptByteRangeRequestMessage : public httptRequestMessage
{
  protected:
    int firstBytePos_var;
    int lastBytePos_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const httptByteRangeRequestMessage&);

  public:
    httptByteRangeRequestMessage(const char *name=NULL, int kind=0);
    httptByteRangeRequestMessage(const httptByteRangeRequestMessage& other);
    virtual ~httptByteRangeRequestMessage();
    httptByteRangeRequestMessage& operator=(const httptByteRangeRequestMessage& other);
    virtual httptByteRangeRequestMessage *dup() const {return new httptByteRangeRequestMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int firstBytePos() const;
    virtual void setFirstBytePos(int firstBytePos_var);
    virtual int lastBytePos() const;
    virtual void setLastBytePos(int lastBytePos_var);
};

inline void doPacking(cCommBuffer *b, httptByteRangeRequestMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, httptByteRangeRequestMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>httptools/messages/httptByteRangeMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet httptByteRangeReplyMessage extends httptReplyMessage
 * {
 *     @omitGetVerb(true);
 *     
 *     int firstBytePos = -1;
 *     int lastBytePos = -1;
 *     
 *     int instanceLength = -1; 
 * }
 * </pre>
 */
class httptByteRangeReplyMessage : public httptReplyMessage
{
  protected:
    int firstBytePos_var;
    int lastBytePos_var;
    int instanceLength_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const httptByteRangeReplyMessage&);

  public:
    httptByteRangeReplyMessage(const char *name=NULL, int kind=0);
    httptByteRangeReplyMessage(const httptByteRangeReplyMessage& other);
    virtual ~httptByteRangeReplyMessage();
    httptByteRangeReplyMessage& operator=(const httptByteRangeReplyMessage& other);
    virtual httptByteRangeReplyMessage *dup() const {return new httptByteRangeReplyMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int firstBytePos() const;
    virtual void setFirstBytePos(int firstBytePos_var);
    virtual int lastBytePos() const;
    virtual void setLastBytePos(int lastBytePos_var);
    virtual int instanceLength() const;
    virtual void setInstanceLength(int instanceLength_var);
};

inline void doPacking(cCommBuffer *b, httptByteRangeReplyMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, httptByteRangeReplyMessage& obj) {obj.parsimUnpack(b);}


#endif // _HTTPTBYTERANGEMESSAGES_M_H_
